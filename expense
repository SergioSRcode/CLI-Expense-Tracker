#!/usr/bin/env node

const { Client } = require('pg');
const { argv } = require('node:process');

function logAndExit(err) {
  console.log(err);
  process.exit(1);
}

class ExpenseData {
  constructor(client) {
    this.client = client;
  }

    displayExpenses(data) {
    data.rows.forEach(row => {
      let columns = [
        `${row.id}`.padStart(3),
        row.created_on.toDateString().padStart(10),
        row.amount.padStart(12),
        row.memo
      ];

      console.log(columns.join(' | '));
    });
  }

  async listExpenses() {
    let data = await this.client.query(`SELECT * FROM expenses ORDER BY created_on`);
    this.displayExpenses(data);
  }

  async addExpenses(amount, memo) {
    let date = new Date();
    date = date.toLocaleDateString();

    try {
      let queryText = `INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)`;
      let queryValues = [amount, memo, date];
      
      await this.client.query(queryText, queryValues);
    } catch(err) {
      console.log('You must provide an amount and memo');
      logAndExit(err);
    }
  }

  async searchExpenses(searchTerm) {
    try {
      let queryText = `SELECT * FROM expenses WHERE memo ILIKE $1`;
      let queryValues = ['%' + searchTerm + '%'];
      let data = await this.client.query(queryText, queryValues);

      this.displayExpenses(data);
    } catch(err) {
      logAndExit(err);
    }
  }
}

class CLI {
  static HELP() {
    return `An expense recording system

Commands:

add AMOUNT MEMO [DATE] - record a new expense
clear - delete all expenses
list - list all expenses
delete NUMBER - remove expense with id NUMBER
serach QUERY - list expenses with a matching memo field`;
  }

  constructor() {
    this.client = new Client({ database: 'expenses'});
    this.expenseData = new ExpenseData(this.client);
  }

  displayHelp() {
    console.log(CLI.HELP());
  }

  async runApp() {
    await this.client.connect();
    let command = (argv[2] || "").toLowerCase();

    if (command === 'list') {
      await this.expenseData.listExpenses();
    } else if (command === 'add') {
      await this.expenseData.addExpenses(argv[3], argv[4]);
    } else if (command === 'search') {
      await this.expenseData.searchExpenses(argv[3]);
    } else {
      this.displayHelp();
    }

    await this.client.end();
  }
}

let cli = new CLI();
cli.runApp();
