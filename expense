#!/usr/bin/env node

const { Client } = require('pg');
const client = new Client({
    database: 'expenses'
});

const HELP = `An expense recording system

Commands:

add AMOUNT MEMO [DATE] - record a new expense
clear - delete all expenses
list - list all expenses
delete NUMBER - remove expense with id NUMBER
search QUERY - list expenses with a matching memo field`

function displayHelp() {
  console.log(HELP);
};

function logAndExit(err) {
  console.log(err);
  process.exit(1);
};

async function listExpenses() {
  await client.connect().catch(err => logAndExit(err));

  let res = await client.query("SELECT * FROM expenses ORDER BY created_on ASC")
                        .catch(err => logAndExit(err));

  res.rows.forEach(tuple => {
    let columns = [
      `${tuple.id}`.padStart(3),
      tuple.created_on.toDateString().padStart(10),
      tuple.amount.padStart(12),
      tuple.memo
    ];

    console.log(columns.join(' | '));
  });

  await client.end().catch(err => logAndExit(err));
};

async function addExpense(amount, memo) {
  await client.connect().catch(err => logAndExit(err));
  let date = new Date();
  date = date.toLocaleDateString();

  await client.query(`INSERT INTO expenses (amount, memo, created_on)
    VALUES (${amount}, '${memo}', '${date}')`).catch(err => logAndExit(err));

  await client.end().catch(err => logAndExit(err));
};

let args = process.argv;
let command = args[2];

if (command === 'list') {
  listExpenses();
} else if (command === 'add') {
  let amount = args[3];
  let memo = args[4];
  if (amount && memo) {
    addExpense(amount, memo);
  } else {
    console.log('You must provide an amount and memo.')
  }
} else {
  displayHelp();
}