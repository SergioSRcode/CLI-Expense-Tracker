#!/usr/bin/env node

const { Client } = require('pg');
const { argv } = require('node:process');
const readline = require('readline');
const { stdin: input, stdout: output } = require('node:process');

function logAndExit(err) {
  console.log(err);
  process.exit(1);
}

class ExpenseData {
  constructor(client) {
    this.client = client;
  }

  displayCount(count) {
    let verb;
    let noun;
    
    if (count === 1) {
      verb = 'is';
      noun = 'expense';
    } else {
      verb = 'are';
      noun = 'expenses';
    }

    console.log(`There ${verb} ${count} ${noun}.`);
  }

  displayExpenses(data, sum = 23.22) {
    if (data.rows.length > 0) {
      this.displayCount(data.rows.length);
      data.rows.forEach(row => {
        let columns = [
          `${row.id}`.padStart(3),
          row.created_on.toDateString().padStart(10),
          row.amount.padStart(12),
          row.memo
        ];

        console.log(columns.join(' | '));
    });

      console.log(`Total ${String(sum).padStart(30)}`);
    } else {
      console.log('There are no expenses.');
    }
    
  }

  async listExpenses() {
    try {
      let data = await this.client.query(`SELECT * FROM expenses ORDER BY created_on`);
      this.displayExpenses(data);
    } catch(err) {
      logAndExit(err);
    }
  }

  async addExpense(amount, memo) {
    let date = new Date();
    date = date.toLocaleDateString();

    try {
      let queryText = `INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)`;
      let queryValues = [amount, memo, date];
      
      await this.client.query(queryText, queryValues);
    } catch(err) {
      logAndExit(err);
    }
  }

  async searchExpenses(searchTerm) {
    try {
      let queryText = `SELECT * FROM expenses WHERE memo ILIKE $1`;
      let queryValues = ['%' + searchTerm + '%'];
      let data = await this.client.query(queryText, queryValues);

      this.displayExpenses(data);
    } catch(err) {
      logAndExit(err);
    }
  }

  async deleteExpense(id) {
    try {
      let queryText = `SELECT * FROM expenses WHERE id = $1`;
      let data = await this.client.query(queryText, [id]);
      
      if (data.rows.length === 1) {
        queryText = `DELETE FROM expenses WHERE id = $1`
        await this.client.query(queryText, [id]);
        console.log('The following expense has been deleted:');
        this.displayExpenses(data);
      } else {
        console.log(`There is no expense with the id '#${id}'`);
      }
    } catch(err) {
      logAndExit(err);
    }
  }

  async deleteAllExpenses() {
    try {
      let queryText = `DELETE FROM expenses`;
      await this.client.query(queryText);
      console.log('All expenses have been deleted');
    } catch(err) {
      logAndExit(err);
    }
  }
}

class CLI {
  static HELP() {
    return `An expense recording system

Commands:

add AMOUNT MEMO [DATE] - record a new expense
clear - delete all expenses
list - list all expenses
delete NUMBER - remove expense with id NUMBER
search QUERY - list expenses with a matching memo field`;
  }

  constructor() {
    this.client = new Client({ database: 'expenses'});
    this.expenseData = new ExpenseData(this.client);
  }

  displayHelp() {
    console.log(CLI.HELP());
  }

  async runApp() {
    await this.client.connect();
    let command = (argv[2] || "").toLowerCase();

    if (command === 'list') {
      await this.expenseData.listExpenses();
    } else if (command === 'add') {
      if (argv[3] && argv[4]) {
        await this.expenseData.addExpense(argv[3], argv[4]);
      } else {
        console.log('You must provide an amount and memo');
      }
    } else if (command === 'search') {
      await this.expenseData.searchExpenses(argv[3]);
    } else if (command === 'delete') {
      await this.expenseData.deleteExpense(argv[3]);
    } else if (command === 'clear') {
      // The promise allows 'deleteAllExpenses' to run before the client connection closes.
      await new Promise((resolve) => {
        const rl = readline.createInterface({ input, output });
        let questionText = 'This will remove all expenses. Are you sure? (enter y to confirm)\n';
        
        rl.question(questionText, async (answer) => {
          if (answer.toLowerCase() === 'y') {
            await this.expenseData.deleteAllExpenses();
          } else {
            console.log('Clearing aborted');
          }
          rl.close();
          resolve();
        });
      });
    } else {
      this.displayHelp();
    }

    await this.client.end();
  }
}

let cli = new CLI();
cli.runApp();
